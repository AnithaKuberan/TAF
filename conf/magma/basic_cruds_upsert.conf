magma.magma_basic_crud.BasicCrudTests:

    #Update items calculated based on fragmentation value, 100MB per vbucket, 128vbuckets, 7 million items
    test_update_multi,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,GROUP=P0;SET0
    test_update_multi,num_items=7000000,nodes_init=4,mix_key_size=True,key_size=20,sdk_timeout=60,vbuckets=128,GROUP=P0;SET0
    test_update_multi,num_items=7000000,nodes_init=4,random_key=True,key_size=22,sdk_timeout=60,vbuckets=128,GROUP=P0;SET0
    test_update_multi,num_items=7000000,nodes_init=4,randomize_doc_size=True,key_size=22,sdk_timeout=60,vbuckets=128,GROUP=P0;SET0
    test_update_multi,num_items=7000000,nodes_init=4,rev_update=True,sdk_timeout=60,vbuckets=128,GROUP=P0;SET0
    test_update_multi,num_items=7000000,nodes_init=4,rev_write=True,sdk_timeout=60,vbuckets=128,GROUP=P1;SET0
    test_update_multi,num_items=7000000,nodes_init=4,rev_write=True,rev_update=True,sdk_timeout=60,vbuckets=128,GROUP=P1;SET0

    #Update items calculated based on fragmentation value, 50MB per vbucket, 512vbuckets, 12.5 million items
    test_update_multi,num_items=12500000,nodes_init=4,key_size=240,sdk_timeout=60,vbuckets=512,GROUP=P0;SET0
    test_update_multi,num_items=12500000,nodes_init=4,key_size=240,randomize_doc_size=True,sdk_timeout=60,vbuckets=512,GROUP=P1;SET0

    #Update items calculated based on fragmentation value, 50MB per vbucket, 1024vbuckets, 25 million items
    test_update_multi,num_items=25000000,nodes_init=4,sdk_timeout=60,GROUP=P1;SET0
    test_update_multi,num_items=25000000,nodes_init=4,mix_key_size=True,key_size=20,sdk_timeout=60,GROUP=P2;SET0
    test_update_multi,num_items=25000000,nodes_init=4,random_key=True,key_size=22,sdk_timeout=60,GROUP=P2;SET0
    test_update_multi,num_items=25000000,nodes_init=4,randomize_doc_size=True,key_size=22,sdk_timeout=60,GROUP=P2;SET0
    test_update_multi,num_items=25000000,nodes_init=4,rev_write=True,sdk_timeout=60,GROUP=P2;SET0
    test_update_multi,num_items=25000000,nodes_init=4,rev_write=True,rev_update=True,sdk_timeout=60,GROUP=P2;SET0
    test_update_multi,num_items=25000000,nodes_init=4,rev_update=True,sdk_timeout=60,GROUP=P2;SET0

    #(Update items calculated based on fragmentation value),  1GB per vbucket, 64vbuckets, 32 million items
    test_update_multi,num_items=32000000,nodes_init=4,sdk_timeout=60,vbuckets=64,GROUP=P2;SET0

    #SET1 cases

    #Update single doc n time(n is the number which gets derived from fragmentation value), 100MB per vbucket, 128vbuckets, 7 million items
    test_update_single_doc_n_times,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,GROUP=P0;SET1
    test_update_single_doc_n_times,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,doc_size=0,GROUP=P0;SET1

    #Update single doc n time(n is the number which gets derived from fragmentation value),  50MB per vbucket, 512vbuckets, 12.5 million items
    test_update_single_doc_n_times,num_items=12500000,nodes_init=4,key_size=240,sdk_timeout=60,vbuckets=512,GROUP=P1;SET1
    test_update_single_doc_n_times,num_items=12500000,nodes_init=4,key_size=240,sdk_timeout=60,vbuckets=512,doc_size=0,GROUP=P1;SET1

    #Update single doc n time(n is the number which gets derived from fragmentation value),50MB per vbucket, 1024vbuckets, 25 million items
    test_update_single_doc_n_times,num_items=25000000,nodes_init=4,sdk_timeout=60,test_itr=2,GROUP=P2;SET1
    test_update_single_doc_n_times,num_items=25000000,nodes_init=4,sdk_timeout=60,test_itr=2,doc_size=0,GROUP=P2;SET1

    #Update single doc n time(n is the number which gets derived from fragmentation value), 1GB per vbucket, 64vbuckets, 32 million items
    test_update_single_doc_n_times,num_items=32000000,nodes_init=4,sdk_timeout=60,vbuckets=64,GROUP=P2;SET1
    test_update_single_doc_n_times,num_items=32000000,nodes_init=4,sdk_timeout=60,vbuckets=64,doc_size=0,GROUP=P2;SET1

    #SET2 Cases
    #Update docs such that val move between seq tree and key trees, 100MB per vbucket, 128vbuckets, 7 million items
    test_move_val_btwn_key_and_seq_trees,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,GROUP=P0;SET2
    test_move_val_btwn_key_and_seq_trees,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,doc_size=0,GROUP=P0;SET2
    test_move_val_btwn_key_and_seq_trees,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,rev_updatee=True,GROUP=P0;SET2
    test_move_val_btwn_key_and_seq_trees,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,randomize_doc_size=True,GROUP=P0;SET2

    #Update docs such that val move between seq tree and key trees, 50MB per vbucket, 512vbuckets, 12.5 million items
    test_move_val_btwn_key_and_seq_trees,num_items=12500000,nodes_init=4,key_size=240,sdk_timeout=60,rev_update=True,vbuckets=512,GROUP=P1;SET2
    test_move_val_btwn_key_and_seq_trees,num_items=12500000,nodes_init=4,key_size=240,sdk_timeout=60,doc_size=0,vbuckets=512,GROUP=P1;SET2

    #Update docs such that val move between seq tree and key trees, 50MB per vbucket, 1024vbuckets, 25 million items
    test_move_val_btwn_key_and_seq_trees,num_items=25000000,nodes_init=4,sdk_timeout=60,test_itr=2,rev_update=True,GROUP=P1;SET2
    test_move_val_btwn_key_and_seq_trees,num_items=25000000,nodes_init=4,sdk_timeout=60,test_itr=2,doc_size=0,GROUP=P2;SET2

    #Update docs such that val move between seq tree and key trees, 1GB per vbucket, 64vbuckets, 32 million items
    test_move_val_btwn_key_and_seq_trees,num_items=32000000,nodes_init=4,sdk_timeout=60,vbuckets=64,GROUP=P2;SET2
