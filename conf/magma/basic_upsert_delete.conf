magma.magma_basic_crud.BasicCrudTests:

    #Categorization of test cases has been done using 'P(n);SET(n)' key word
    #Same type of cases will have same category, For example
    #"test_multi_update_delete" is one category and its cases
    # will be categorized based on P0;SET0 or P1;SET0 or P2;SET0

    #SET0 CASES

    #(Update n items->del n/2 items ->recreate n/2 items), 100MB per vbucket, 128vbuckets, 7 million items
    test_multi_update_delete,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P0;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,mix_key_size=True,key_size=20,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P0;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,random_key=True,key_size=22,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P0;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,randomize_doc_size=True,key_size=22,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P0;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,sdk_timeout=60,rev_update=True,vbuckets=128,test_itr=2,update_itr=2,GROUP=P0;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,rev_write=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P1;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,rev_write=True,rev_update=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P1;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,rev_write=True,rev_update=True,rev_del=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,rev_write=True,rev_del=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=7000000,nodes_init=4,rev_update=True,rev_del=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P2;SET0

    #(Update n items->del n/2 items ->recreate n/2 items), 50MB per vbucket, 512vbuckets, 12.5 million items
    test_multi_update_delete,num_items=12500000,nodes_init=4,key_size=240,sdk_timeout=60,vbuckets=512,test_itr=2,update_itr=2,GROUP=P1;SET0
    test_multi_update_delete,num_items=12500000,nodes_init=4,key_size=240,randomize_doc_size=True,sdk_timeout=60,vbuckets=512,test_itr=2,update_itr=2,GROUP=P0;SET0

    #(Update n items->del n/2 items ->recreate n/2 items), 50MB per vbucket, 1024vbuckets, 25 million items
    test_multi_update_delete,num_items=25000000,nodes_init=4,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P1;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,mix_key_size=True,key_size=20,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,random_key=True,key_size=22,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,randomize_doc_size=True,key_size=22,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,rev_update=True,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,rev_write=True,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,rev_write=True,rev_update=True,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,rev_update=True,rev_del=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,rev_write=True,rev_update=True,rev_del=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P2;SET0
    test_multi_update_delete,num_items=25000000,nodes_init=4,rev_write=True,rev_del=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P2;SET0

    #(Update n items->del n/2 items ->recreate n/2 items), 1GB per vbucket, 64vbuckets, 32 million items
    test_multi_update_delete,num_items=32000000,nodes_init=4,sdk_timeout=60,vbuckets=64,test_itr=2,update_itr=2,GROUP=P2;SET0


    # SET1 CASES

    #(Update n/2 ->rev Update n/2->del n/2 recreate n/2), 100MB per vbucket, vbuckets=128, 7 million items
    test_update_rev_update,num_items=7000000,nodes_init=4,next_half=True,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P0;SET1
    test_update_rev_update,num_items=7000000,nodes_init=4,sdk_timeout=60,vbuckets=128,test_itr=2,update_itr=2,GROUP=P0;SET1

    #(Update n/2 ->rev Update n/2->del n/2 recreate n/2), 50MB per vbucket, 512vbuckets, 12.5 million items
    test_update_rev_update,num_items=12500000,nodes_init=4,key_size=240,next_half=True,sdk_timeout=60,vbuckets=512,test_itr=2,update_itr=2,GROUP=P0;SET1
    test_update_rev_update,num_items=12500000,nodes_init=4,key_size=240,sdk_timeout=60,vbuckets=512,test_itr=2,update_itr=2,GROUP=P1;SET1

    #(Update n/2 ->rev Update n/2->del n/2 recreate n/2), 50MB per vbucket, 1024vbuckets, 25 million item
    test_update_rev_update,num_items=25000000,nodes_init=4,next_half=True,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET1
    test_update_rev_update,num_items=25000000,nodes_init=4,sdk_timeout=60,test_itr=2,update_itr=2,GROUP=P2;SET1

    #(Update n/2 ->rev Update n/2->del n/2 recreate n/2), 1GB per vbucket, 64vbuckets, 32 million items
    test_update_rev_update,num_items=32000000,nodes_init=4,next_half=True,sdk_timeout=60,vbuckets=64,test_itr=2,update_itr=2,GROUP=P2;SET1
    test_update_rev_update,num_items=32000000,nodes_init=4,sdk_timeout=60,vbuckets=64,test_itr=2,update_itr=2,GROUP=P2;SET1
